<?xml version="1.0"?>
<project name="tds" default="compile" basedir=".">
  <property name="release.version" value="3.13"/>
  <property name="release.version.minor" value="${release.version}.14"/>
  <tstamp>
    <format property="buildtime" pattern="yyyy-MM-dd HH:mm:ss" timezone="GMT"/>
  </tstamp>

  <!-- Load environment and user properties. -->
  <property environment="env"/>
  <property file="${user.home}/build.properties"/>

  <!-- Current CDM javadoc URL. -->
  <property name="cdmAll.javadoc.url"
            value="http://www.unidata.ucar.edu/software/netcdf-java/v2.2.17/javadocAll/"/>

  <!-- Directories for releasing to FTP or WWW site, defaults are John's.
       Override by adding to build.properties file. -->
  <property name="uni.ftp.dir" value="O:"/>
  <property name="uni.www.dir" value="Z:"/>

  <!-- TOMCAT_HOME directory, override in build.properties file. -->
  <property name="tomcat_root" value="C:/Program Files (x86)/Apache Software Foundation/Tomcat-5.5"/>

  <property name="root.dir" location="${basedir}"/>
  <property name="src.dir" location="${root.dir}/src/main/java"/>
  <property name="resources.dir" location="${root.dir}/src/main/resources"/>
  <property name="lib.dir" location="${root.dir}/../lib"/>
  <property name="doc.dir" location="${root.dir}/doc"/>

  <property name="build.dir" location="${root.dir}/target"/>
  <property name="build.classes.dir" location="${build.dir}/classes"/>
  <property name="build.debug" value="on"/>
  <property name="build.release" value="false"/>
  <property name="javadoc.dir" location="${build.dir}/javadoc"/>

  <property name="release.dir" value="${uni.ftp.dir}/pub/thredds/${release.version}/"/>
  <!--
  <property name="release.library.dir" value="${uni.ftp.dir}/pub/thredds/${release.version}/"/>
  <property name="release.doc.dir" value="${uni.ftp.dir}/pub/netcdf-java/v${release.version}/"/>

  <property name="release.html.dir" value="${uni.ftp.dir}/content/software/netcdf-java/v${release.version}/"/>
  <property name="release.javadoc.dir" value="${uni.ftp.dir}/content/software/netcdf-java/v${release.version}/javadoc/"/>
  <property name="webstart_dir" location="${release.html.dir}/webstart"/>
  -->

  <property name="test.dir" location="${root.dir}/src/test"/>
  <property name="test.src.dir" location="${test.dir}/java"/>
  <property name="test.data.dir" location="${test.dir}/data"/>
  <property name="test.classes.dir" location="${build.dir}/test/classes"/>

  <!-- Webapp source locations. -->
  <property name="webapp.src.dir" location="${root.dir}/src/main/webapp"/>
  <property name="webapp.resources.dir" location="${webapp.src.dir}/resources"/>

  <!-- Information about the servlet context and such. -->
  <property name="context.name" value="thredds"/>
  <property name="contextPath" value="/${context.name}"/>
  <property name="war.dir" value="${build.dir}/war/${context.name}"/>
  <property name="warfile" value="${context.name}.war"/>

  <!-- Source path and target source. -->
  <path id="sourcepath">
    <pathelement location="${src.dir}"/>
  </path>

  <patternset id="sources">
    <include name="dods/servers/**/*.java"/>
    <include name="thredds/cataloggen/servlet/*.java"/>
    <include name="thredds/dqc/server/**/*.java"/>
    <include name="thredds/examples/*.java"/>
    <include name="thredds/servlet/*.java"/>
    <exclude name="thredds/servlet/ForecastModelRunServlet.java"/>
    <include name="thredds/servlet/ldm/*.java"/>
    <include name="thredds/wcs/servlet/*.java"/>
  </patternset>

  <!-- Project libraries needed for compile. -->
  <property name="bufr.jar" value="release/bufr.jar"/>
  <property name="netcdf.jar" value="release/netcdf-2.2.17.jar"/>
  <property name="grib.jar" value="release/grib-5.0.01.jar"/>
  <property name="prefs.jar" value="release/prefsAll.jar"/>
  <property name="visadNoDods.jar" value="release/visadNoDods.jar"/>

  <!-- Third-party libraries needed for compile. -->
  <property name="jdom.jar" value="external/jdom.jar"/>
  <property name="fileupload.jar" value="external/commons-fileupload-1.1.jar"/>
  <property name="httpclient.jar" value="external/commons-httpclient-3.0.jar"/>
  <property name="logging.jar" value="external/nlog4j-1.2.21.jar"/>

  <!-- Third-party libraries needed for runtime. -->
  <property name="commons-io.jar" value="external/commons-io-1.1.jar"/>
  <property name="gnu-regexp.jar" value="external/gnu-regexp-1.1.4.jar"/>
  <property name="http-codec.jar" value="external/commons-codec-1.3.jar"/>
  <property name="http-logging.jar" value="external/commons-logging-1.0.4.jar"/>
  <property name="jpeg2000.jar" value="external/jpeg2000.jar"/>
  <property name="xml-apis.jar" value="external/xml-apis.jar"/>
  <property name="xercesImpl.jar" value="external/xercesImpl.jar"/>

  <!-- The servlet jar file is needed to compile the servlet but is not needed
    by the servlet engine, therefore, it is not needed in the war file. -->
  <property name="servlet.jar" value="external/servlet-api.jar"/>

  <!-- Some extra project and third-party libraries. -->
  <property name="resourcesOptional.jar" value="release/resourcesOptional.jar"/>
  <property name="threddsResources.jar" value="release/threddsResources-3.10.jar"/>

  <property name="junit.jar" value="external/junit.jar"/>
  <property name="httpunit.jar" value="external/httpunit.jar"/>

  <fileset id="compile.libraries" dir="${lib.dir}">
    <patternset id="compile.libs">
      <include name="${bufr.jar}"/>
      <include name="${netcdf.jar}"/>
      <include name="${grib.jar}"/>
      <include name="${prefs.jar}"/>
      <include name="${visadNoDods.jar}"/>

      <include name="${jdom.jar}"/>
      <include name="${fileupload.jar}"/>
      <include name="${httpclient.jar}"/>
      <include name="${logging.jar}"/>
    </patternset>
  </fileset>

  <fileset id="runtime.libraries" dir="${lib.dir}">
    <patternset id="runtime.libs">
      <include name="${threddsResources.jar}" />
      <include name="${commons-io.jar}"/>
      <include name="${gnu-regexp.jar}"/>
      <include name="${http-codec.jar}"/>
      <include name="${http-logging.jar}"/>
      <include name="${jpeg2000.jar}"/>
      <include name="${xml-apis.jar}"/>
      <include name="${xercesImpl.jar}"/>
    </patternset>
  </fileset>

  <fileset id="servlet.compile.libraries" dir="${lib.dir}">
    <include name="${servlet.jar}"/>
  </fileset>

  <path id="compile.classpath">
    <fileset refid="compile.libraries" />
    <fileset refid="servlet.compile.libraries" />
  </path>

  <!-- targets -->
  <target name="mytest">
    <echo>nj22.exists=${nj22.exists}</echo>
    <echo>nj22.root.dir=${nj22.root.dir}</echo>
    <echo>nj22.lib.dir=${nj22.lib.dir}</echo>
    <echo>nj22_resources.dir=${nj22_resources.dir}</echo>
    <echo>nj22.src.dir=${nj22.src.dir}</echo>
    <pathconvert property="nj22.compile.libraries.prop" refid="nj22.compile.libraries" targetos="windows"/>
    <pathconvert property="nj22.runtime.libraries.prop" refid="nj22.runtime.libraries" targetos="windows"/>
    <echo>nj22.compile.libraries=${nj22.compile.libraries.prop}</echo>
    <echo>nj22.runtime.libraries=${nj22.runtime.libraries.prop}</echo>
  </target>

  <target name="cleanCompile" depends="clean, compile"/>
  <target name="cleanDist" depends="clean, compile, makeWar"/>
  <target name="cleanTestSetup" depends="clean, compile, test-setup"/>
  <target name="init">
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.dir}"/>
    <echo message="Initialize ${ant.project.name}"/>
  </target>

  <target name="clean" description="Deletes all files that are generated by the build.">
    <delete dir="${build.dir}" failonerror="false"/>
  </target>

  <target name="release-settings">
    <condition property="build.debuglevel" value="lines">
      <istrue value="${build.release}"/>
    </condition>
    <property name="build.debuglevel" value="lines,vars,source"/>
    <!-- echo>release.build=${release.build}</echo>
    <echo>build.debuglevel=${build.debuglevel}</echo -->
  </target>

  <target name="dist" depends="compile, makeWar"/>

  <target name="compile" depends="init, release-settings" description="TDS compile">
    <javac destdir="${build.classes.dir}" source="1.4" target="1.4" debug="${build.debug}"
           debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset refid="sources"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="makeJar-TSF" >
    <jar jarfile="${build.dir}/$tsf-${release.version.minor}.jar" index="true">
      <fileset dir="${build.classes.dir}">
        <include name="thredds/examples/*"/>
        <include name="thredds/servlet/*"/>
      </fileset>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${buildtime}"/>
        <attribute name="Implementation-Title" value="THREDDS Servlet Framework (TSF)"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>

  </target>

  <!-- build war directory -->
  <target name="war-setup" depends="compile" description="create a distribution">
    <!-- create README file with time and version -->
    <mkdir dir="${war.dir}"/>
    <copy file="README.TEMPLATE" tofile="${war.dir}/docs/README.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${buildtime}"/>
        <filter token="VERSION" value="${release.version.minor}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.txt" tofile="${war.dir}/docs/CHANGES.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${buildtime}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <!-- copy classes to war classes directory. -->
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <copy todir="${war.dir}/WEB-INF/classes" preservelastmodified="true" overwrite="true">
      <fileset dir="${build.classes.dir}"/>
    </copy>

    <!-- copy libraries to war lib directory. -->
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="runtime.libraries"/>
    </copy>

    <!-- Copy WEB-INF contents including web.xml. -->
    <copy todir="${war.dir}/WEB-INF" overwrite="true" preservelastmodified="true">
      <fileset dir="${webapp.src.dir}/WEB-INF">
        <include name="log4j.xml" />
      </fileset>
    </copy>

    <copy todir="${war.dir}/WEB-INF/classes/resources" overwrite="true" preservelastmodified="true">
      <fileset dir="${resources.dir}" />
    </copy>

    <copy file="${webapp.src.dir}/WEB-INF/web-thredds.xml"
          tofile="${war.dir}/WEB-INF/web.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- copy web resources to war directory last -->
    <copy todir="${war.dir}" preservelastmodified="true" overwrite="true">
      <fileset dir="${webapp.resources.dir}">
        <!--exclude name="CVS"/>
        <exclude name=".svn"/-->
      </fileset>
    </copy>

    <!-- Copy CatalogGen test data to initialContent/ directory for example setup. -->
    <!--copy todir="${war.dir}/initialContent/cataloggen/testData/model" preservelastmodified="true" overwrite="true">
      <fileset dir="${test.data.dir}/thredds/cataloggen/testData/model"/>
    </copy-->

    <!-- Copy DqcServlet test data to initialContent/ directory for example setup. -->
    <!--copy todir="${war.dir}/initialContent/dqcServlet/testData" preservelastmodified="true" overwrite="true">
      <fileset dir="${test.data.dir}/thredds/cataloggen/testData/model"/>
    </copy-->

    <!-- Servlet engine needs write permission on log, config, and catalog directories. -->
    <chmod file="${war.dir}/initialContent/logs" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/cataloggen/config" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/cataloggen/catalogs" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/dqcServlet/config" perm="775" type="dir"/>

  </target>
  <!-- dist target -->

  <target name="makeWar" depends="war-setup" description="create a war file from the distribution directory">
    <jar destfile="${build.dir}/${warfile}">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${buildtime}"/>
        <attribute name="Implementation-Title" value="THREDDS Data Server"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <target name="makeWar-ExampleThredds" depends="war-setup" description="create a war file from the distribution directory">
    <!-- Copy web.xml into war dir. -->
    <copy file="${webapp.src.dir}/WEB-INF/web-expThredds.xml"
          tofile="${war.dir}/WEB-INF/web.xml"
          overwrite="true" preservelastmodified="true"/>
    <!-- Copy web.xml into war dir. -->
    <mkdir dir="${war.dir}/META-INF"/>
    <copy file="${webapp.src.dir}/META-INF/context-expThredds.xml"
          tofile="${war.dir}/META-INF/context.xml"
          overwrite="true" preservelastmodified="true"/>

    <jar destfile="${build.dir}/expThredds.war">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${buildtime}"/>
        <attribute name="Implementation-Title" value="Example THREDDS Server"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <target name="makeWar-DqcServletRedirect" depends="init, release-settings"
          description="create a war file from the distribution directory">

    <!-- build thredds.dqc.DqcServletRedirect -->
    <javac destdir="${build.classes.dir}" source="1.4" target="1.4" debug="${build.debug}"
           debuglevel="${build.debuglevel}"
           includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset includes="thredds/dqc/server/DqcServletRedirect.java"/>
      <classpath refid="compile.classpath"/>
    </javac>

    <!-- create war dir -->
    <mkdir dir="${war.dir}"/>

    <!-- create README file with time and version -->
    <copy file="README.TEMPLATE" tofile="${war.dir}/docs/README.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${buildtime}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <!-- copy classes to war classes directory. -->
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <copy todir="${war.dir}/WEB-INF/classes" preservelastmodified="true" overwrite="true">
      <fileset dir="${build.classes.dir}" excludes="ucar/**"/>
    </copy>

    <!-- copy libraries to war lib directory. -->
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="runtime.libraries"/>
    </copy>

    <!-- create initialContent directory with log directory -->
    <mkdir dir="${war.dir}/initialContent/logs"/>
    <chmod file="${war.dir}/initialContent/logs" perm="775" type="dir"/>

    <!-- Copy index.html into war dir. -->
    <copy file="${webapp.resources.dir}/index-dqcServletRedirect.html"
          tofile="${war.dir}/index.html"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy web.xml into war dir. -->
    <copy file="${webapp.src.dir}/WEB-INF/web-dqcServletRedirect.xml"
          tofile="${war.dir}/WEB-INF/web.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy log4j.xml into war dir. -->
    <copy file="${webapp.src.dir}/WEB-INF/log4j-dqcServletRedirect.xml"
          tofile="${war.dir}/WEB-INF/log4j.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy context.xml into war dir. -->
    <copy file="${webapp.src.dir}/META-INF/context-dqcServletRedirect.xml"
          tofile="${war.dir}/META-INF/context.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Create the WAR file. -->
    <jar destfile="${build.dir}/dqcServlet.war">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${buildtime}"/>
        <attribute name="Implementation-Title" value="DqcServletRedirect - test"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <!-- ********** Javadoc Realease ********** -->
  <!-- Build the Javadocs  -->
  <target name="javadoc" description="make the javadocs">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc Doctitle="THREDDS" Windowtitle="THREDDS" maxmemory="256m" Use="true"
             sourcepathref="sourcepath" destdir="${javadoc.dir}" public="true" source="1.4">

      <classpath refid="compile.classpath"/>

      <package name="dods.servers.netcdf"/>
      <package name="thredds.cataloggen.servlet"/>
      <package name="thredds.dqc.server.*"/>
      <package name="thredds.examples"/>
      <package name="thredds.servlet"/>
      <package name="thredds.servlet.ldm"/>
      <package name="thredds.wcs.servlet"/>

      <link href="${cdmAll.javadoc.url}" />

    </javadoc>
  </target>

  <!-- Create javadoc Zip -->
  <property name="javadocZipReleaseName" value="tdsJavadoc-${release.version}.zip"/>
  <property name="javadocZip.dir" location="${build.dir}/javadocZip"/>
  <property name="javadocZip.target.dir" location="${javadocZip.dir}/thredds-${release.version.minor}/javadoc"/>
  <target name="makeJavadocZip" depends="javadoc"
          description="create a zip file containing THREDDS Data Server javadoc">
    <mkdir dir="${javadocZip.target.dir}"/>
    <copy todir="${javadocZip.target.dir}" overwrite="true">
      <fileset dir="${javadoc.dir}"/>
    </copy>

    <zip destfile="${build.dir}/${javadocZipReleaseName}" basedir="${javadocZip.dir}"/>
  </target>

  <!-- ************* Create Digests ******************** -->
  <path id="tomcatClassPath">
    <fileset dir="${tomcat_root}/bin">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${tomcat_root}/server/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  <target name="digest" description="Create password digest">
    <!--pathconvert property="tomcatClassPath.prop" refid="tomcatClassPath" targetos="windows"/>
    <echo>tomcatClassPath=${tomcatClassPath.prop}</echo -->
    <input addproperty="algorithm">Enter algorithm:</input>
    <input addproperty="password">Enter password:</input>
    <java classname="org.apache.catalina.realm.RealmBase" fork="yes">
      <classpath refid="tomcatClassPath"/>
      <arg line="-a ${algorithm} ${password}"/>
    </java>
  </target>


  <!-- ************* DEPLOYMENT ******************** -->
  <property name="username" value="admin"/>
  <target name="deploy-local" description="Deploy web application to localhost">
    <antcall target="deploy">
      <param name="server_url" value="http://localhost:8080"/>
      <param name="tomcat.password" value="${local.password}"/>
    </antcall>
  </target>

  <target name="deploy-uni10-dev" description="Deploy web application to uni10 dev/test server">
    <antcall target="deploy">
      <param name="server_url" value="http://uni10.unidata.ucar.edu:8090"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>

  <target name="deploy-motherlode-dev" description="Deploy web application to motherlode dev/test server">
    <antcall target="deploy">
      <param name="server_url" value="http://motherlode.ucar.edu:9080"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>


  <target name="deploy-dataportal" description="Deploy web application to dataportal dev/test server">
    <antcall target="deploy">
      <param name="server_url" value="http://dataportal.ucar.edu:3481"/>
      <param name="tomcat.password" value="${dataportal.password}"/>
    </antcall>
  </target>

  <target name="deploy-motherlode-live" description="Deploy web application to motherlode live server">
    <antcall target="deploy">
      <param name="server_url" value="http://motherlode.ucar.edu:8080"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>

  <target name="deploy-lead1" description="Deploy web application to lead1 server">
    <antcall target="deploy">
      <param name="server_url" value="http://lead1.unidata.ucar.edu:8080"/>
      <param name="tomcat.password" value="${lead1.password}"/>
    </antcall>
  </target>

  <!-- ### taken from tomcat deployer ############### -->
  <!-- Configure the custom Ant tasks for the Manager application -->
  <path id="deployer.classpath">
    <fileset dir="${ant.home}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="list" classname="org.apache.catalina.ant.ListTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="roles" classname="org.apache.catalina.ant.RolesTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="start" classname="org.apache.catalina.ant.StartTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="stop" classname="org.apache.catalina.ant.StopTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
    <classpath refid="deployer.classpath"/>
  </taskdef>
  <target name="deploy" depends="makeWar" description="Deploy web application">
    <deploy url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"
            war="${build.dir}/${warfile}" update="true"/>
  </target>
  <target name="undeploy" description="Undeploy web application">
    <undeploy url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <!-- Webapp lifecycle control -->
  <target name="start" description="Start web application">
    <start url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <target name="reload" description="Reload web application">
    <reload url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <target name="stop" description="Stop web application">
    <stop url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>

  <!-- release war file -->
  <target name="release" description="Release war files to release directory: do 'ant makeWar' first">
    <copy todir="${release.dir}" overwrite="true">
      <fileset dir="${build.dir}" includes="${warfile}"/>
    </copy>
    <copy todir="${release.dir}" overwrite="true">
      <fileset file="${war.dir}/docs/CHANGES.txt"/>
    </copy>
  </target>

  <!-- Release catalog manual. (target from thredds/catalog/build.xml) -->
  <!--target name="releaseManual" description="Copy manual to release directory">
    <copy todir="${release.library.dir}" overwrite="true" file="./docs/CatalogManual.doc"/>
  </target-->


  <!-- TESTING  -->
  <path id="test.classpath">
    <path refid="compile.classpath"/>
    <fileset dir="${lib.dir}" includes="${junit.jar}"/>
    <fileset dir="${lib.dir}" includes="${httpunit.jar}"/>
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${test.classes.dir}"/>
  </path>

  <target name="test-setup" description="compile and setup for tests">
    <mkdir dir="${test.classes.dir}"/>

    <!-- debugging path -->
    <property name="test.classpath" refid="test.classpath"/>
    <echo>test.classpath=${test.classpath}</echo>

    <javac destdir="${test.classes.dir}" source="1.4" target="1.4" debug="${build.debug}" srcdir="${test.src.dir}">
      <classpath refid="test.classpath"/>
    </javac>

    <!-- Copy test data into the test classes directory so can be used as resource. -->
    <copy todir="${test.classes.dir}" overwrite="true">
      <fileset dir="${test.data.dir}"/>
    </copy>

  </target>

  <target name="test" description="run tests"/>

</project>
