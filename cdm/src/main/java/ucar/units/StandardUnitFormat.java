/* Generated By:JavaCC: Do not edit this line. StandardUnitFormat.java */
    package ucar.units;

    import java.io.InputStreamReader;
    import java.io.IOException;
    import java.io.LineNumberReader;
    import java.io.Serializable;
    import java.io.StringReader;
    import java.text.DateFormat;
    import java.text.DecimalFormat;
    import java.text.NumberFormat;
    import java.text.SimpleDateFormat;
    import java.util.Arrays;
    import java.util.Calendar;
    import java.util.Comparator;
    import java.util.Date;
    import java.util.Locale;
    import java.util.StringTokenizer;
    import java.util.TimeZone;

    /**
     * Standard formatter/parser for unit specifications.
     *
     * @author Steven R. Emmerson
     */
    public final class
    StandardUnitFormat
        extends UnitFormatImpl implements StandardUnitFormatConstants {
        private boolean                         isTimeUnit;

        /**
         * The singleton instance of this class.
         * @serial
         */
        private static StandardUnitFormat       _instance;

        /**
         * The Julian day number of the (artificial) time origin.
         * @serial
         */
        private static final long               julianDayOrigin =
            StandardUnitFormat.julianDay(2001, 1, 1);

        /**
         * The date formatter.
         * @serial
         */
        private static final SimpleDateFormat   dateFormat;

        /**
         * The Comparator for ordering base units for printing.  Orders
         * Factor-s by decreasing exponent (major) and lexically (minor).
         * @serial
         */
        private static final Comparator         factorComparator =
            new Comparator()
            {
                public int compare(Object o1, Object o2)
                {
                    Factor      f1 = ((Factor)o1);
                    Factor      f2 = ((Factor)o2);
                    int comp = f2.getExponent() - f1.getExponent();
                    if (comp == 0)
                        comp = f1.getID().compareTo(f2.getID());
                    return comp;
                }
            };

        static
        {
            dateFormat =
                (SimpleDateFormat)DateFormat.getDateInstance(
                    DateFormat.SHORT, Locale.US);
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            dateFormat.applyPattern(" '@' yyyy-MM-dd HH:mm:ss.SSS 'UTC'");
        }

        /**
         * Constructs from nothing.
         */
        private
        StandardUnitFormat()
        {
            this(new StringReader(""));
        }


        /**
         * Returns an instance of this class.
         * @return              An instance of this class.
         */
        public static StandardUnitFormat
        instance()
        {
            if (_instance == null)
            {
                synchronized(StandardUnitFormat.class)
                {
                    if (_instance == null)
                        _instance = new StandardUnitFormat();
                }
            }
            return _instance;
        }


        /**
         * Decodes a unit specification.  An unrecognized unit is made into
         * an UnknownUnit.
         * @param spec          The unit specification to be decoded.
         * @param unitDB        The unit database to use.
         * @return              The unit corresponding to the specification.
         * @throws UnitParseException   The unit specification syntax is
         *                              invalid.
         * @throws SpecificationException       Something's wrong with the
         *                                      specification.
         * @throws UnitDBException      Something's wrong with the unit
         *                              database.
         * @throws PrefixDBException    Something's wrong with the unit prefix
         *                              database.
         * @throws UnitSystemException  Something's wrong with the underlying
                                        system of units.
         */
        public Unit
        parse(String spec, UnitDB unitDB)
            throws UnitParseException,
                SpecificationException,
                UnitDBException,
                PrefixDBException,
                UnitSystemException
        {
            ReInit(new StringReader(spec.trim()));

            try
            {
                Unit    unit = unitSpec(unitDB);
                return unit;
            }
            catch (TokenMgrError e)
            {
                throw new UnitParseException(spec, e.getMessage());
            }
            catch (ParseException e)
            {
                throw new UnitParseException(spec, e.getMessage());
            }
            catch (OperationException e)
            {
                throw new SpecificationException(spec, e.getMessage());
            }
        }


        /**
         * Formats a Factor.
         * @param factor        The factor to be formatted.
         * @param buf           The buffer to append to.
         * @return              The appended-to buffer.
         */
        public StringBuffer
        format(Factor factor, StringBuffer buf)
        {
            return buf.append(factor.toString());
        }


        /**
         * Formats a unit.  The symbol or name will be used if available;
         * otherwise, a specification in terms of underlying units will be
         * returned.
         * @param unit          The unit to be formatted.
         * @param buf           The buffer to append to.
         * @return              The appended-to buffer.
         * @throws UnitClassException   The class of the unit is unknown.
         */
        public StringBuffer
        format(Unit unit, StringBuffer buf)
            throws UnitClassException
        {
            return format(unit, buf, true);
        }


        /**
         * Formats a unit in the underlying system of units.
         * @param unit          The unit to be formatted.
         * @param buf           The buffer to append to.
         * @return              The appended-to buffer.
         * @throws UnitClassException   The class of the unit is unknown.
         */
        public StringBuffer
        longFormat(Unit unit, StringBuffer buf)
            throws UnitClassException
        {
            return format(unit, buf, false);
        }


        /**
         * Formats a unit.
         * @param unit          The unit to be formatted.
         * @param buf           The buffer to append to.
         * @param normalize     Whether or not to reduce the unit.
         * @return              The appended-to buffer.
         * @throws UnitClassException   The class of the unit is unknown.
         */
        private StringBuffer
        format(Unit unit, StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            boolean     done = false;
            if (!normalize)
            {
                String  id = unit.getSymbol();
                if (id == null)
                    id = unit.getName();
                if (id != null)
                {
                    buf.append(id.replace(' ', '_'));
                    done = true;
                }
            }
            if (!done)
            {
                if (unit instanceof BaseUnit)
                    format((BaseUnit)unit, buf);
                else
                if (unit instanceof DerivedUnit)
                    format((DerivedUnit)unit, buf);
                else
                if (unit instanceof ScaledUnit)
                    format((ScaledUnit)unit, buf, normalize);
                else
                if (unit instanceof OffsetUnit)
                    format((OffsetUnit)unit, buf, normalize);
                else
                if (unit instanceof TimeScaleUnit)
                    format((TimeScaleUnit)unit, buf, normalize);
                else
                    throw new UnitClassException(unit);
            }
            return buf;
        }


        private StringBuffer
        format(BaseUnit baseUnit, StringBuffer buf)
        {
            return buf.append(baseUnit.getSymbol());
        }


        private StringBuffer
        format(DerivedUnit unit, StringBuffer buf)
        {
            Factor[]    factors = unit.getDimension().getFactors();
            Arrays.sort(factors, factorComparator);
            for (int i = 0; i < factors.length; i++)
                format(factors[i], buf).append('.');
            if (factors.length != 0)
                buf.setLength(buf.length()-1);
            return buf;
        }


        private StringBuffer
        format(ScaledUnit unit, StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            String      result;
            double      scale = unit.getScale();
            if (scale != 0.0)
            {
                if (scale == 1)
                {
                    format(unit.getUnit(), buf, normalize);
                }
                else
                {
                    buf.append(scale).append(' ');
                    int start = buf.length();
                    format(unit.getUnit(), buf, normalize);
                    if (start == buf.length())
                        buf.setLength(start-1);
                }
            }
            return buf;
        }


        private StringBuffer
        format(OffsetUnit unit, StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            double      offset = unit.getOffset();
            if (offset == 0.0)
            {
                format(unit.getUnit(), buf, normalize);
            }
            else
            {
                int     start = buf.length();
                format(unit.getUnit(), buf, normalize);
                return (isBlackSpace(buf, start)
                            ? buf
                            : buf.insert(start, '(').append(')')).
                        append(" @ ").append(offset);
            }
            return buf;
        }

        private boolean
        contains(StringBuffer buf, int start, char[] chars)
        {
            int n = buf.length();
            for (int i = start; i < n; i++)
            {
                char    c = buf.charAt(i);
                for (int j = 0; j < chars.length; j++)
                {
                    if (c == chars[j])
                        return true;
                }
            }
            return false;
        }


        private StringBuffer
        formatBinaryUnit(Unit first, Unit second, char separator,
                StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            int start = buf.length();
            group(first, buf, normalize);
            if (start < buf.length())
                buf.append(separator);
            group(second, buf, normalize);
            if (buf.charAt(buf.length()-1) == separator)
                buf.setLength(buf.length()-1);
            return buf;
        }


        private StringBuffer
        group(Unit unit, StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            int start = buf.length();
            format(unit, buf, normalize);
            if (!isBlackSpace(buf, start))
            {
                buf.insert(start, '(');
                buf.append(')');
            }
            return buf;
        }


        private static boolean
        isBlackSpace(StringBuffer buf, int start)
        {
            return buf.substring(start).indexOf(' ') == -1;
        }


        private StringBuffer
        format(TimeScaleUnit unit, StringBuffer buf, boolean normalize)
            throws UnitClassException
        {
            return format(unit.getUnit(), buf, normalize).
                append(dateFormat.format(unit.getOrigin()));
        }


        /**
         * Compute the Julian day number of a date.
         */
        private static long
        julianDay(int year, int month, int day)
        {
            long        igreg = 15 + 31 * (10 + (12 * 1582));
            int         iy;     // signed, origin-0 year
            int         ja;     // Julian century
            int         jm;     // Julian month
            int         jy;     // Julian year
            long        julday; // returned Julian day number

            /*
             * Because there is no 0 BC or 0 AD, assume the user wants
             * the start of the common era if they specify year 0.
             */
            if (year == 0)
                year = 1;

            iy = year;
            if (year < 0)
                iy++;
            if (month > 2)
            {
                jy = iy;
                jm = month + 1;
            }
            else
            {
                jy = iy - 1;
                jm = month + 13;

            }

            julday = day + (int)(30.6001 * jm);
            if (jy >= 0)
            {
                julday += 365 * jy;
                julday += 0.25 * jy;
            }
            else
            {
                double  xi = 365.25 * jy;

                if ((int)xi != xi)
                    xi -= 1;
                julday += (int)xi;
            }
            julday += 1720995;

            if (day + (31* (month + (12 * iy))) >= igreg)
            {
                ja = jy/100;
                julday -= ja;
                julday += 2;
                julday += ja/4;
            }

            return julday;
        }


        /**
         * Convert broken-out time into a double.
         */
        private static double
        toDouble(int year, int month, int day,
            int hour, int minute, float second, int zone)
        {
            return (julianDay(year, month, day) - julianDayOrigin) *
                86400.0 + (hour*60 + minute - zone)*60 + second;
        }


        /**
         * Gets a unit from a unit database.
         */
        private static Unit
        getUnit(UnitDB unitDB, String string)
            throws UnitDBAccessException
        {
            return unitDB.get(string);
        }


        /**
         * Gets a prefix from the prefix database.
         */
        private static Prefix
        getPrefix(String string)
            throws PrefixDBException
        {
            PrefixDB    prefixDB = PrefixDBManager.instance();
            Prefix      prefix = prefixDB.getPrefixByName(string);
            if (prefix == null)
                prefix = prefixDB.getPrefixBySymbol(string);
            return prefix;
        }


        /**
         * Test this class.
         */
        public static void main(String[] args)
            throws Exception
        {
            StandardUnitFormat          parser =
                StandardUnitFormat.instance();
            LineNumberReader    lineInput = new LineNumberReader(
                                    new InputStreamReader(System.in));

            for (;;)
            {
                System.out.print("Enter a unit specification or ^D to quit: ");

                String  spec = lineInput.readLine();
                if (spec == null)
                    break;

                try
                {
                    System.out.println(parser.parse(spec.trim()));
                }
                catch (Exception e)
                {
                    System.out.println(e.getMessage());
                }
            }
            System.out.println("");
        }

  final public Unit unitSpec(UnitDB unitDB) throws ParseException, OperationException, UnitSystemException, PrefixDBException, UnitDBException {
    Unit        unit = DerivedUnitImpl.DIMENSIONLESS;
    Unit        unit2;
    Date        timestamp;
    double      origin;
    int         exponent;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UINT:
    case E:
    case Z:
    case UTC:
    case SYMBOL:
    case T:
    case NAME:
    case 14:
    case 16:
    case 18:
    case 19:
      unit = unitTerm(unitDB);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
        {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

  final public Unit unitTerm(UnitDB unitDB) throws ParseException, OperationException, UnitSystemException, PrefixDBException, UnitDBException {
    Unit        unit;
    Unit        unit2;
    Date        timestamp;
    double      origin;
    unit = unitFactor(unitDB);
    label_1:
    while (true) {
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UINT:
      case WHITESPACE:
      case E:
      case Z:
      case UTC:
      case SYMBOL:
      case T:
      case NAME:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACE:
        case 14:
        case 15:
          if (jj_2_2(2)) {
            jj_consume_token(WHITESPACE);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 14:
              jj_consume_token(14);
              break;
            case 15:
              jj_consume_token(15);
              break;
            default:
              jj_la1[1] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        unit2 = unitFactor(unitDB);
                unit = unit.multiplyBy(unit2);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        unit2 = unitFactor(unitDB);
                unit = unit.divideBy(unit2);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (isTimeUnit) {
          timestamp = timeOriginExpression();
                unit = new TimeScaleUnit(unit, timestamp);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SHIFT:
            origin = numericalOriginExpression();
                unit = new OffsetUnit(unit, origin);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
        {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

  final public Unit unitFactor(UnitDB unitDB) throws ParseException, OperationException, UnitSystemException, PrefixDBException, UnitDBException {
    Unit        unit;
    int         exponent;
    double      scale;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UINT:
    case 14:
    case 18:
    case 19:
      scale = number();
                unit = new ScaledUnit(scale);
      break;
    case E:
    case Z:
    case UTC:
    case SYMBOL:
    case T:
    case NAME:
    case 16:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case E:
      case Z:
      case UTC:
      case SYMBOL:
      case T:
      case NAME:
        unit = unitIdentifier(unitDB);
        break;
      case 16:
        jj_consume_token(16);
        unit = unitTerm(unitDB);
        jj_consume_token(17);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(2)) {
        exponent = powerExpression();
                    unit = unit.raiseTo(exponent);
      } else {
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        isTimeUnit = unit.isCompatible(UnitSystemManager.instance().
            getBaseUnit(BaseQuantity.TIME));
        {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

  final public double numericalOriginExpression() throws ParseException {
    double      origin = 0;
    jj_consume_token(SHIFT);
    origin = number();
        {if (true) return origin;}
    throw new Error("Missing return statement in function");
  }

  final public double number() throws ParseException {
    int         sign = 1;
    int         exponent;
    double      number;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 19:
      sign = sign();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    number = unsignedDecimal();
    if (jj_2_4(2)) {
      jj_consume_token(E);
      exponent = integer();
            number = number * Math.pow(10, exponent);
    } else {
      ;
    }
        {if (true) return sign == 1 ? number : -number;}
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {
    int         sign = 1;
    int         integer;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 19:
      sign = sign();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    integer = unsignedInteger();
        {if (true) return sign == 1 ? integer : -integer;}
    throw new Error("Missing return statement in function");
  }

  final public int sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
              {if (true) return 1;}
      break;
    case 19:
      jj_consume_token(19);
              {if (true) return -1;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int unsignedInteger() throws ParseException {
    Token       t;
    t = jj_consume_token(UINT);
        {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public double unsignedDecimal() throws ParseException {
    int         integer = 0;
    double      fraction = 0;
    Token       t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UINT:
      integer = unsignedInteger();
      if (jj_2_6(2)) {
        jj_consume_token(14);
        if (jj_2_5(2)) {
          t = jj_consume_token(UINT);
                        fraction = new Double("." + t.image).doubleValue();
        } else {
          ;
        }
      } else {
        ;
      }
      break;
    case 14:
      jj_consume_token(14);
      t = jj_consume_token(UINT);
                fraction = new Double("." + t.image).doubleValue();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return integer + fraction;}
    throw new Error("Missing return statement in function");
  }

  final public int powerExpression() throws ParseException {
    int         exponent;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    exponent = integer();
        {if (true) return exponent;}
    throw new Error("Missing return statement in function");
  }

  final public Unit unitIdentifier(UnitDB unitDB) throws ParseException, UnitDBException, UnitSystemException, PrefixDBException {
    Token       t;
    Unit        unit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case E:
      t = jj_consume_token(E);
      break;
    case Z:
      t = jj_consume_token(Z);
      break;
    case UTC:
      t = jj_consume_token(UTC);
      break;
    case SYMBOL:
      t = jj_consume_token(SYMBOL);
      break;
    case T:
      t = jj_consume_token(T);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        String  string = t.image;
        double  scale = 1;

        for (unit = getUnit(unitDB, string);
            unit == null;
            unit = getUnit(unitDB, string))
        {
            Prefix      prefix = getPrefix(string);
            if (prefix == null)
            {
                try
                {
                    // System.err.println("Unknown unit: \"" + string + '"');
                    unit = UnknownUnit.create(string);
                    break;
                }
                catch (NameException e)
                {}      // shouldn't happen
            }
            scale *= prefix.getValue();
            string = string.substring(prefix.length());
        }
        if (scale != 1)
        {
            unit = new ScaledUnit(scale, unit);
        }
        {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

/*
 * See <http://www.w3.org/Out-Of-Date/TR/NOTE-datetime-970915.html> for
 * a discussion of the relevant timestamp format.
 */
  final public Date timeOriginExpression() throws ParseException {
    int         year = 0;
    int         month = 1;
    int         day = 1;
    int         hour = 0;
    int         minute = 0;
    int         second = 0;
    int         millisecond = 0;
    double      sec;
    double      when = 0;
    Token       t;
    int         sign = 1;
    int         zoneHour;
    int         zoneMinute = 0;
    int         zone = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINCE:
      jj_consume_token(SINCE);
      break;
    case SHIFT:
      jj_consume_token(SHIFT);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    year = integer();
    if (jj_2_9(2)) {
      jj_consume_token(19);
      month = unsignedInteger();
      jj_consume_token(19);
      day = unsignedInteger();
      if (jj_2_8(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case T:
          jj_consume_token(T);
          break;
        default:
          jj_la1[15] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            jj_consume_token(WHITESPACE);
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
        }
        hour = unsignedInteger();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          jj_consume_token(21);
          minute = unsignedInteger();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 21:
            jj_consume_token(21);
            sec = unsignedDecimal();
                        second = (int)sec;
                        millisecond = (int)Math.round((sec - second) * 1000);
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        if (jj_2_7(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHITESPACE:
            jj_consume_token(WHITESPACE);
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UINT:
          case 18:
          case 19:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 18:
            case 19:
              sign = sign();
              break;
            default:
              jj_la1[19] = jj_gen;
              ;
            }
            zoneHour = unsignedInteger();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 21:
              jj_consume_token(21);
              zoneMinute = unsignedInteger();
              break;
            default:
              jj_la1[20] = jj_gen;
              ;
            }
                            if (zoneHour >= 100)
                            {
                                zoneMinute += zoneHour % 100;
                                zoneHour /= 100;
                            }

                            zone = sign * (zoneHour * 60 + zoneMinute);
            break;
          case UTC:
            jj_consume_token(UTC);
            break;
          case Z:
            jj_consume_token(Z);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
      } else {
        ;
      }
    } else {
      ;
    }
        if (month < 1 || month > 12 ||
            day < 1 || day > 31 ||
            hour < 0 || hour > 23 ||
            minute < 0 || minute > 59 ||
            second < 0 || second > 61 ||
            zone < -1440 || zone > 1440)
        {
            {if (true) throw new ParseException("invalid timestamp");}
        }

        StringBuffer    zoneId = new StringBuffer(12);

        zoneId.append("GMT");
        if (zone >= 0)
        {
            zoneId.append('+');
        }
        else
        {
            zoneId.append('-');
            zone = -zone;
        }
        zoneId.append(zone/60);
        zoneId.append(':');
        zone %= 60;
        if (zone < 10)
            zoneId.append('0');
        zoneId.append(zone);

        Calendar        calendar =
            Calendar.getInstance(TimeZone.getTimeZone(zoneId.toString()));

        calendar.clear();
        calendar.set(year, month-1, day, hour, minute, second);
        calendar.set(Calendar.MILLISECOND, millisecond);

        {if (true) return calendar.getTime();}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(14)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(UINT)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(WHITESPACE)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTimeUnit;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(E)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    if (jj_3R_10()) return true;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(SHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(UINT)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    return false;
  }

  public StandardUnitFormatTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xd7d82,0xc000,0xc008,0xdfdaa,0x40,0x13d80,0xd7d82,0xc0000,0xc0000,0xc0000,0x4002,0x100000,0x3d80,0x44,0x8,0x1000,0x200000,0x200000,0x8,0xc0000,0x200000,0xc0502,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public StandardUnitFormat(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StandardUnitFormatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StandardUnitFormat(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StandardUnitFormatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StandardUnitFormat(StandardUnitFormatTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(StandardUnitFormatTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[22];
    for (int i = 0; i < 22; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
