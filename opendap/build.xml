<?xml version="1.0"?>

<!--
/////////////////////////////////////////////////////////////////////////////
// This file is part of the "Java-DAP" project, a Java implementation
// of the OPeNDAP Data Access Protocol.
//
// Copyright (c) 2010, OPeNDAP, Inc.
// Copyright (c) 2002,2003 OPeNDAP, Inc.
// 
// Author: James Gallagher <jgallagher@opendap.org>
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms,
// with or without modification, are permitted provided
// that the following conditions are met:
// 
// - Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// 
// - Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// 
// - Neither the name of the OPeNDAP nor the names of its contributors may
//   be used to endorse or promote products derived from this software
//   without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/////////////////////////////////////////////////////////////////////////////
-->

<!DOCTYPE project [
       
        ]>

<!-- Build file for OPeNDAP core software -->


<project name="OPeNDAP Core Software" default="all" basedir=".">

    <!-- Global Properties -->
    <!-- ********************************************* -->
    <!-- Project-wide settings. All directories are    -->
    <!-- relative to the project "Basedir" directory,  -->
    <!-- which is assumed (by this file) to be set to  -->
    <!-- ".."                                          -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="VERSION" value="2.2"/>
    
    <!-- Compiler Settings -->
    <property name="compile.debug" value="on"/>
    <property name="compile.debuglevel" value="lines,vars,source"/>
    <property name="compile.deprecation" value="on"/>
    <property name="modern.compiler" value="modern"/>
    <property name="classic.compiler" value="classic"/>
    
    <!--  build.compiler: This is a "magic" property.
          the javac task, if the "compiler" property is not
         explicitly set, then javac will use the value of this
         property ("build.compiler") to set the compiler type.
         See the online ANT Users Manual.
         Read the section the compiler attribute of the javac task.
         http://ant.apache.org/manual/index.html
    -->
    <property name="build.compiler" value="${modern.compiler}"/>
    
    
    <!-- build.sysclasspath
         This is a "magic" property. The value of the build.sysclasspath
         property controls how the system classpath, ie. the classpath in
         effect when Ant is run, affects the behaviour of classpaths in
         Ant. The default behavior varies from Ant to Ant task.
         
         The values and their meanings are:
         only -   Only the system classpath is used and classpaths
         specified in build files, etc are ignored. This
         situation could be considered as the person running
         the build file knows more about the environment
         than the person writing the build file
         ignore - The system classpath is ignored. This situation is
         the reverse of the above. The person running the
         build trusts the build file writer to get the build
         file right
         last -   The classpath is concatenated to any specified
         classpaths at the end. This is a compromise, where
         the build file writer has priority.
         first -  Any specified classpaths are concatenated to the
         system classpath. This is the other form of compromise
         where the build runner has priority.
         
         Excerpted from the online ANT users Manual
         http://ant.apache.org/manual/sysclasspath.html
         -->
         <property name="build.sysclasspath" value="ignore"/>


    <!-- Project directories -->
    <property name="src.dir"          location="src"/>
        <property name="src.main.dir" location="src/main"/>
        <property name="src.java.dir" location="${src.main.dir}/java"/>
        <property name="src.test.dir" location="src/test"/>
        <property name="src.test.java.dir" location="${src.test.dir}/java"/>

    <property name="test.dir"         location="${src.test.dir}"/>
    <property name="doc.dir"          location="doc"/>
    <property name="lib.dir"          location="lib"/>
    <!--property name="bin.dir"          location="bin"/ -->
    <!--property name="dist.dir"         location="dist"/ -->
    <property name="resources.dir"    location="${src.main.dir}/resources"/>
    <property name="schema.dir"       location="schema"/>
    <property name="testsuites.dir"   location="${src.test.dir}/testsuites"/>
    <property name="buildfiles.dir"   location="target"/>

    <!-- Build Directories -->
    <property name="build.dir"        location="target"/>
    <property name="build.classes"    location="${build.dir}/classes"/>
    <property name="build.doc"        location="${build.dir}/doc"/>
    <property name="build.lib"        location="${build.dir}/lib"/>

    <!-- Where to put test case output -->
    <property name="results.dir"        location="${build.dir}/results"/>

    <!-- Target jar file -->
    <property name="opendap.jar" value="opendap-${VERSION}.jar"/>

    <!-- Libraries
       - This section creates properties (aliases) for the names of all the
       - libraries. This simplifies the process of updating software
       - dependancies - always use the property name elswhere in the build
       - file and you only ever have to change this instance of the actual
       - jar file name.
       -
       - Add new properties for each new library that you add to the project.
      -->
    <property name="jdom.lib"           value="jdom-1.0.jar"/>
    <property name="xercesImpl.lib"     value="xercesImpl-2.9.0.jar"/>
    <property name="xercesXmlApis.lib"  value="xml-apis-2.9.0.jar"/>
    <property name="servlet.lib"        value="tomcat-5.5.20_servlet-api.jar"/>

    <property name="httpclient.lib"     value="commons-httpclient-3.1.jar"/>
    <property name="codec.lib"          value="commons-codec-1.3.jar"/>
    <property name="logging.lib"        value="commons-logging-1.1.jar"/>
    <property name="unitTest.lib"       value="junit-4.4.jar"/>


    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - Predefined paths
      -->

    <!-- CLASSPATH dependancies for DAP -->
    <path id="dap.compile.classpath">
        <pathelement path="${build.classes}"/>
        <fileset dir="${lib.dir}">
            <include name="${jdom.lib}"/>
            <include name="${httpclient.lib}"/>
            <include name="${logging.lib}"/>
            <include name="${unitTest.lib}"/>
            <include name="${servlet.lib}"/>
        </fileset>
    </path>

    <!-- CLASSPATH dependancies for DAP Server -->
    <path id="servers.compile.classpath">
        <path refid="dap.compile.classpath"/>
          <fileset dir="${lib.dir}">
            <include name="${servlet.lib}"/>
        </fileset>
  </path>


    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - Basic Targets
      -->

    <target name="all" description="Clean compiles the core OPeNDAP software."
            depends="clean,compile"/>

    <target name="compile" description="Compiles the core OPeNDAP software."
            depends="servers"/>


    <!-- Target "clean" cleans up ALL build products -->
    <target name="clean" description="Clean up ALL build products.">
        <delete dir="${build.dir}"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - Misc Targets
      -->

    <target name="thredds" description="make and release thredds jar"
	depends="opendap-lib">
        <copy file="${build.lib}/${opendap.jar}" todir="../lib/release/" />
    </target>

    <!--
      - Target "init" prepares (creates if neccessary)
      - the build dircteory tree.
      -->
    <target name="init" description="Prepare all build directories.">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.doc}"/>
        <mkdir dir="${results.dir}"/>
        <tstamp/>
        <echo level="info" message="time: ${TSTAMP}"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -
      - Compilation Targets
      -
      -->

    <target name="dap" description="Compiles the core software required by OPeNDAP clients."
            depends="init"
            >
        <echo level="info" message="AntFile: ${ant.file} Compiling DAP"/>
        <echo level="info" message="Using the ${build.compiler} javac compiler"/>
        <echo>${user.dir}</echo>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               includeAntRuntime="false" source="1.5" target="1.5">
            <classpath refid="dap.compile.classpath"/>
            <src path="${src.java.dir}"/>
            <include name="opendap/dap/**/*.java"/>
            <include name="opendap/Version.java"/>
            <include name="opendap/util/**/*.java"/>
            <exclude name="opendap/dap/parser/ignore/*.java"/>
            <exclude name="opendap/dap/test/*.java"/>
        </javac>
    </target>

    <target name="servers" description="Compiles the all of the core required by OPeNDAP servers."
            depends="dap"
            >
        <echo level="info" message="AntFile: ${ant.file} Compiling Servers"/>
        <echo level="info" message="Using the ${build.compiler} javac compiler"/>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               includeAntRuntime="false" source="1.5" target="1.5">
            <classpath refid="servers.compile.classpath"/>
            <src path="${src.java.dir}"/>
            <include name="opendap/servlet/**/*.java"/>
            <include name="opendap/servers/www/**/*.java"/>
            <include name="opendap/servers/ascii/**/*.java"/>
            <include name="opendap/servers/test/**/*.java"/>
            <include name="opendap/servers/sql/**/*.java"/>
        </javac>
    </target>

    <target name="testcases" description="Compiles the test programs in ${src.java.dir}"
            depends="dap"
            >
        <echo level="info" message="AntFile: ${ant.file} Compiling Test Cases"/>
        <echo level="info" message="Using the ${build.compiler} javac compiler"/>
        <echo level="info" message=""/>
        <javac compiler="${build.compiler}"
               destdir="${build.classes}"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               includeAntRuntime="false" source="1.5" target="1.5">
            <!--classpath refid="servers.compile.classpath"/-->
            <classpath refid="dap.compile.classpath"/>
            <src path="${src.test.java.dir}"/>
            <include name="opendap/test/*.java"/>
        </javac>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -
      - Documentation Targets
      -
      -->
    <target name="doc" description="Builds JavaDoc for the core OPeNDAP
                         software packages, if missing or out of date."
            depends="init,IsJavaDocUpToDate"
            unless="JavaDocIsUpToDate"
            >

        <javadoc destdir="${build.doc}/javadoc"
                 Author="true"
                 Version="true"
                 Use="true"
                 Verbose="false"
                 failonerror="true">

            <tag name="opendap.ddx.experimental"
                 scope="all"
                 description="&lt;p&gt;This class/method is associated with pre-release version of the DDX API. It is experimental and is subject to (significant) change. &lt;/p&gt;" />
            <classpath refid="servers.compile.classpath"/>
            <fileset dir="${src.java.dir}/opendap">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>

        <copy todir="${build.doc}">
            <fileset dir="${doc.dir}">
                <exclude name="src.distribution.readme"/>
                <exclude name="servlet-index.html"/>
            </fileset>
        </copy>
    </target>

    <target name="IsJavaDocUpToDate" description="Checks to see if the JavaDoc is out of date."
            >
        <uptodate property="JavaDocIsUpToDate" targetfile="${build.doc}/javadoc/index.html">
            <srcfiles dir="${src.java.dir}">
                <include name="opendap/Version.java"/>
                <include name="opendap/dap/**/*.java"/>
                <include name="opendap/util/**/*.java"/>
                <include name="opendap/servlet/**/*.java"/>
                <include name="opendap/servers/www/**/*.java"/>
                <include name="opendap/servers/ascii/**/*.java"/>
                <include name="opendap/servers/test/**/*.java"/>
            </srcfiles>
        </uptodate>

    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -
      - OPeNDAP Library Targets
      -
      -->

    <target name="lib-dist"
	depends="opendap-lib">
        <jar destfile="${build.dist}/${opendap.jar}">
            <zipfileset dir="${build.lib}" prefix="opendap-${VERSION}-lib"/>
            <zipfileset dir="${lib.dir}" prefix="opendap-${VERSION}-lib">
                <include name="${jdom.lib}"/>
                <include name="${httpclient.lib}"/>
                <include name="${xercesImpl.lib}"/>
                <include name="${xercesXmlApis.lib}"/>
            </zipfileset>
        </jar>

    </target>

    <target name="opendap-lib"
	depends="clean,servers">
        <jar destfile="${build.lib}/${opendap.jar}">
            <fileset dir="${build.classes}"/>
        </jar>
    </target>

    <target name="xmltest" description="Runs the XmlTest application on the primary DDX test file."
            depends="dap"
            >
        <java classname="opendap.dap.XMLparser.XmlTest">
            <classpath refid="dap.compile.classpath"/>
            <arg value="-v"/>
            <arg value="${testsuites.dir}/sdds-testsuite/ddx/xmltest.01"/>
        </java>
    </target>

    <target name="generateconstraints"
            depends="testcases">
        <java classname="opendap.test.GenerateConstraints">
            <classpath refid="dap.compile.classpath"/>
        </java>
    </target>

    <target name="test" description="Runs various tests"
            depends="init,testcases"
            >
        <delete dir="${results.dir}"/>
	<mkdir  dir="${results.dir}"/>

        <java classname="opendap.test.TestCeParser">
            <classpath refid="dap.compile.classpath"/>
        </java>
<!--
        <java classname="opendap.test.TestCeParser">
            <classpath refid="dap.compile.classpath"/>
        </java>
        <java classname="opendap.test.TestDDS">
            <classpath refid="dap.compile.classpath"/>
        </java>
        <java classname="opendap.test.TestDConnect2">
            <classpath refid="dap.compile.classpath"/>
        </java>
-->
    </target>


    <target name="show" description="Show build settings.">
        <echo level="info" message="Project Name:       ${ant.project.name}"/>
        <echo level="info" message="Project File:       ${ant.file}"/>
        <echo level="info" message="VERSION:            ${VERSION}"/>
        <echo level="info" message=""/>
        <echo level="info" message="Project Directories:"/>
        <echo level="info" message="    src.java.dir:  ${src.java.dir}"/>
        <echo level="info" message="    doc.dir:  ${doc.dir}"/>
        <echo level="info" message="    dist.dir: ${dist.dir}"/>
        <echo level="info" message="    lib.dir:  ${lib.dir}"/>
        <echo level="info" message="    bin.dir:  ${bin.dir}"/>
        <echo level="info" message=""/>
        <echo level="info" message="Build Directories:"/>
        <echo level="info" message="    build.dir:      ${build.dir}"/>
        <echo level="info" message="    build.classes:  ${build.classes}"/>
        <echo level="info" message="    build.IPSClient:  ${build.IPSClient}"/>
        <echo level="info" message="    build.doc:      ${build.doc}"/>
        <echo level="info" message="    build.lib:      ${build.lib}"/>
        <echo level="info" message="    build.webapps:  ${build.webapps}"/>
        <echo level="info" message=""/>
        <echo level="info" message="Ant Properties:"/>
        <echo level="info" message="    ant.file:          ${ant.file}"/>
        <echo level="info" message="    ant.home:          ${ant.home}"/>
        <echo level="info" message="    ant.java.version:  ${ant.java.version}"/>
        <echo level="info" message="    ant.project.name:  ${ant.project.name}"/>
        <echo level="info" message="    ant.version:       ${ant.version}"/>
        <echo level="info" message="    basedir:           ${basedir}"/>
        <echo level="info" message="    user.name:         ${user.name}"/>
        <echo level="info" message="    user.home:         ${user.home}"/>
        <echo level="info" message="    java.home:         ${java.home}"/>
        <echo level="info" message=""/>
    </target>

</project>
